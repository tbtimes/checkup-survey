# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2016-04-06 20:05
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import localflavor.us.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'ordering': ['assignment', 'question__order'],
            },
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('form_chatter', models.TextField(blank=True, help_text=b'Optional text specific to this respondent that will appear before the form questions.')),
                ('display_chatter', models.TextField(blank=True, help_text=b"Optional text the reader sees before reading respondent's answers.")),
                ('contacted', models.BooleanField(default=False, help_text=b'When respondent has been contacted, check this box.')),
                ('receipt_confirmed', models.BooleanField(default=False, help_text=b'When respondent has confirmed receipt, check this box.')),
                ('survey_complete', models.BooleanField(default=False, editable=False, help_text=b'Has the respondent answered the questions currently assigned.')),
                ('confirmation_sent', models.BooleanField(default=False, help_text=b'Check this after you have sent an email to respondents with their answers.')),
                ('form_slug', models.SlugField(default=b'', editable=False, unique=True)),
                ('display_slug', models.SlugField(default=b'', editable=False, unique=True)),
                ('short_url', models.URLField(blank=True, editable=False)),
                ('contact_notes', models.TextField(blank=True, help_text=b'Type notes on attempts to conduct this assignment here.')),
            ],
            options={
                'ordering': ['survey', 'respondent'],
            },
        ),
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice', models.CharField(max_length=75, unique=True)),
            ],
            options={
                'ordering': ('-display__order',),
            },
        ),
        migrations.CreateModel(
            name='ChoiceDisplay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField()),
                ('display', models.TextField(blank=True)),
                ('no_answer', models.BooleanField(default=False, help_text=b"bucket represents the 'no answer' option.")),
                ('order', models.PositiveSmallIntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Contribution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contrib_count', models.IntegerField()),
                ('years', models.CharField(max_length=255)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
            ],
        ),
        migrations.CreateModel(
            name='ContributionType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=255)),
                ('contrib_desc', models.CharField(blank=True, max_length=500)),
                ('contrib_footnote', models.CharField(blank=True, max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='FormRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=50, unique=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('request_time', models.DateTimeField(auto_now_add=True)),
                ('page_loaded', models.IntegerField(default=0)),
                ('referer', models.CharField(blank=True, default=b'', max_length=255)),
                ('user_agent', models.CharField(blank=True, default=b'', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=75, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField()),
                ('explanation', models.TextField(blank=True, help_text=b'Provide more information about this question.')),
                ('directed_to', models.CharField(blank=True, default=b'', help_text=b'A short description of who this question is going to (e.g., "State Lawmakers")', max_length=150)),
                ('visualize', models.BooleanField(default=True)),
                ('order', models.PositiveSmallIntegerField(default=1)),
                ('choices', models.ManyToManyField(to='checkup.Choice')),
            ],
            options={
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='QuestionGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=75, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='QuestionGroupOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveSmallIntegerField()),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='checkup.QuestionGroup')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='checkup.Question')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Reporter',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('phone', localflavor.us.models.PhoneNumberField(blank=True, max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Respondent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('party', models.CharField(blank=True, choices=[(b'REP', b'Republican'), (b'DEM', b'Democrat')], help_text=b'Optional, the party of the person. This is used in legislative suffixes (R-Hempstead) ONLY when a district is also specified below.', max_length=3)),
                ('district', models.CharField(blank=True, help_text=b"Optional legislative district. If both party and district are specified, a suffix (R-Hempstead) may appear after the legislator's name", max_length=75)),
                ('gender', models.CharField(choices=[(b'M', b'Male'), (b'F', b'Female')], max_length=1)),
                ('first_name', models.CharField(max_length=75)),
                ('last_name', models.CharField(max_length=75)),
                ('website', models.URLField(blank=True, max_length=254)),
                ('office_phone', localflavor.us.models.PhoneNumberField(blank=True, help_text=b'The number the public calls to talk with this person.', max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('twitter', models.CharField(blank=True, max_length=75)),
                ('address', models.CharField(blank=True, help_text=b'Public mailing address.', max_length=150)),
                ('address2', models.CharField(blank=True, max_length=150)),
                ('city', models.CharField(blank=True, max_length=75)),
                ('state', localflavor.us.models.USPostalCodeField(blank=True, choices=[(b'AL', 'Alabama'), (b'AK', 'Alaska'), (b'AS', 'American Samoa'), (b'AZ', 'Arizona'), (b'AR', 'Arkansas'), (b'AA', 'Armed Forces Americas'), (b'AE', 'Armed Forces Europe'), (b'AP', 'Armed Forces Pacific'), (b'CA', 'California'), (b'CO', 'Colorado'), (b'CT', 'Connecticut'), (b'DE', 'Delaware'), (b'DC', 'District of Columbia'), (b'FM', 'Federated States of Micronesia'), (b'FL', 'Florida'), (b'GA', 'Georgia'), (b'GU', 'Guam'), (b'HI', 'Hawaii'), (b'ID', 'Idaho'), (b'IL', 'Illinois'), (b'IN', 'Indiana'), (b'IA', 'Iowa'), (b'KS', 'Kansas'), (b'KY', 'Kentucky'), (b'LA', 'Louisiana'), (b'ME', 'Maine'), (b'MH', 'Marshall Islands'), (b'MD', 'Maryland'), (b'MA', 'Massachusetts'), (b'MI', 'Michigan'), (b'MN', 'Minnesota'), (b'MS', 'Mississippi'), (b'MO', 'Missouri'), (b'MT', 'Montana'), (b'NE', 'Nebraska'), (b'NV', 'Nevada'), (b'NH', 'New Hampshire'), (b'NJ', 'New Jersey'), (b'NM', 'New Mexico'), (b'NY', 'New York'), (b'NC', 'North Carolina'), (b'ND', 'North Dakota'), (b'MP', 'Northern Mariana Islands'), (b'OH', 'Ohio'), (b'OK', 'Oklahoma'), (b'OR', 'Oregon'), (b'PW', 'Palau'), (b'PA', 'Pennsylvania'), (b'PR', 'Puerto Rico'), (b'RI', 'Rhode Island'), (b'SC', 'South Carolina'), (b'SD', 'South Dakota'), (b'TN', 'Tennessee'), (b'TX', 'Texas'), (b'UT', 'Utah'), (b'VT', 'Vermont'), (b'VI', 'Virgin Islands'), (b'VA', 'Virginia'), (b'WA', 'Washington'), (b'WV', 'West Virginia'), (b'WI', 'Wisconsin'), (b'WY', 'Wyoming')], max_length=2)),
                ('zip', models.CharField(blank=True, max_length=5)),
                ('headshot', models.URLField(blank=True, help_text=b'URL of head shot image', max_length=255)),
                ('contact_name', models.CharField(blank=True, help_text=b'Name of their spokesperson or other assistant (or the respondent if you have non-public contact information).', max_length=150)),
                ('contact_phone', localflavor.us.models.PhoneNumberField(blank=True, max_length=20)),
                ('contact_email', models.EmailField(blank=True, max_length=254)),
                ('sheet_id', models.IntegerField(default=0)),
                ('group', models.ForeignKey(help_text=b'A group of respondents that may be asked the same questions, i.e. Nassau County Legislator', on_delete=django.db.models.deletion.CASCADE, to='checkup.Group')),
            ],
            options={
                'ordering': ['title', 'last_name'],
            },
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
                ('form_chatter', models.TextField(blank=True, help_text=b'Optional, all respondents read this before filling out form (you can set chatter for specific respondents when creating an assignment).')),
                ('home_slug', models.SlugField(default=b'', unique=True)),
                ('display_chatter', models.TextField(blank=True, help_text=b'Optional, readers read this before reading survey responses.')),
                ('display_byline', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Title',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short', models.CharField(help_text=b'Used for smaller spaces. U.S. Sen. or San Diego D.A.', max_length=75)),
                ('long', models.CharField(help_text=b'Examples: United States Senator or San Diego District Attorney.', max_length=75)),
                ('order', models.PositiveSmallIntegerField(default=0, help_text=b'Lower order is a higher rank. So, president is 0 and village clerk is 50')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('assignment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='comment', serialize=False, to='checkup.Assignment')),
                ('comment', models.TextField(blank=True)),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='title',
            unique_together=set([('short', 'long')]),
        ),
        migrations.AddField(
            model_name='respondent',
            name='title',
            field=models.ForeignKey(help_text=b"Displayed next to a person's name", on_delete=django.db.models.deletion.CASCADE, to='checkup.Title'),
        ),
        migrations.AddField(
            model_name='reporter',
            name='title',
            field=models.ForeignKey(blank=True, help_text=b"Optional title to appear before reporter's name.", on_delete=django.db.models.deletion.CASCADE, to='checkup.Title'),
        ),
        migrations.AddField(
            model_name='questiongroup',
            name='questions',
            field=models.ManyToManyField(through='checkup.QuestionGroupOrder', to='checkup.Question'),
        ),
        migrations.AddField(
            model_name='formrequest',
            name='assignment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='checkup.Assignment'),
        ),
        migrations.AddField(
            model_name='contributiontype',
            name='survey',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contributiontypes', to='checkup.Survey'),
        ),
        migrations.AddField(
            model_name='contribution',
            name='assignment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contributions', to='checkup.Assignment'),
        ),
        migrations.AddField(
            model_name='contribution',
            name='contrib_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='checkup.ContributionType'),
        ),
        migrations.AddField(
            model_name='choice',
            name='display',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='checkup.ChoiceDisplay'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='questions',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='checkup.QuestionGroup'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='reporter',
            field=models.ForeignKey(blank=True, help_text=b'Reporter assigned to contact respondent for this survey.', on_delete=django.db.models.deletion.CASCADE, to='checkup.Reporter'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='respondent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='checkup.Respondent'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='survey',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='checkup.Survey'),
        ),
        migrations.AddField(
            model_name='answer',
            name='answer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='checkup.Choice'),
        ),
        migrations.AddField(
            model_name='answer',
            name='assignment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='checkup.Assignment'),
        ),
        migrations.AddField(
            model_name='answer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='checkup.QuestionGroupOrder'),
        ),
        migrations.AlterUniqueTogether(
            name='assignment',
            unique_together=set([('survey', 'respondent')]),
        ),
        migrations.AlterUniqueTogether(
            name='answer',
            unique_together=set([('assignment', 'question')]),
        ),
    ]
